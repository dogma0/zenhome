scalar DateTime

type Query {
  me: User
  testAllShowings: [Showing!]!
}

type Mutation {
  signup(name: String!, email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  deleteShowing(id: ID!): Showing!
  createShowing(addr: String!, datetime: String!, phone: String!): Showing!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  createdAt: DateTime!
  showings: [Showing!]!
}

type Showing {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String!
  phoneNumber: String!
  datetime: String!
  status: SHOWING_STATUS!
}

enum SHOWING_STATUS {
  IN_DRAFT
  PENDING_SELLER_CONFIRMATION
  CONFIMED_BY_SELLER
  REJECTED_BY_SELLER
  CANCELED
}