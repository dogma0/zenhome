scalar DateTime

type Query {
  me: User
  testAllOffers: [Offer!]!
  testAllTourings: [Touring!]!
}

type Mutation {
  signup(name: String!, email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  deleteOffer(id: ID!): Offer!
  deleteTouring(id: ID!): Touring!
  createOffer: Offer!
  createTouring: Touring!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  createdAt: DateTime!
  offers: [Offer!]!
  tourings: [Touring!]!
}

type Offer {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  listingInfo: String!
  status: OFFER_STATUS!
}

type Touring {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  listingInfo: String!
  status: TOURING_STATUS!
}

enum OFFER_STATUS {
  IN_DRAFT
  PENDING_REVIEW
  REVIEWED
  SUBMITTED
  ACCEPTED
  REJECTED
  CANCELED
}

enum TOURING_STATUS {
  IN_DRAFT
  PENDING_SELLER_CONFIRMATION
  CONFIMED_BY_SELLER
  REJECTED_BY_SELLER
  CANCELED
}